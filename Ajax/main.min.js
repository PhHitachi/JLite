(function (e) {
	e.extend({
		then: function (callback) {
			//console.log(XMLHttpRequest.prototype)
			this.xhr.onreadystatechange = function () {
				if (this.readyState == 4) {
					callback(this)
				}
			};
			return this;
		},
		http: function (method, url, options) {
			var xhr;
			if (typeof method === 'object') {
				options = method;
				url = void 0;
			}
			options = options || {};

			if (window.XMLHttpRequest) {
				xhr = new XMLHttpRequest();
			} else if (window.ActiveXObject) {
				xhr = new ActiveXObject("Microsoft.XMLHTTP");
			}
			function isJSON(str) {
			    try {
			        return (JSON.parse(str) && !!str);
			    } catch (e) {
			        return false;
			    }
			}
			if (xhr) {
				(function () {
					this.json = function () {
						try {
							return !isJSON(this.responseText) ? this['responseText'] : JSON.parse(this.responseText)
						} catch (e) {
							console.error(e)
						}

					}
				}).call(XMLHttpRequest.prototype);

				xhr.onreadystatechange = function () {
					if (this.readyState == 4) {
						if (this.status == 200) {
							if (options.success) {
								options.success(this.responseText, this)
							}
						}
					}
				}

				//console.log(!options.data ? null : options.data)
				xhr.open(method, url, true);
				if (method == 'POST' || method == 'UPDATE' || method == 'PATCH') {
					options.data = !options.data ? null : options.data;
				}
				xhr.send(options.data);
			}

			this['xhr'] = xhr;
			return this;
		},
	});
	e.fn.extend({
		serialize: function() {
			var serialized = [];
		    this.each(e => {
		    	var field = e.elements;
		    	for (var i = 0; i < field.length; i++) {
			    	if (!field[i].name || field[i].disabled || field[i].type === 'file' || field[i].type === 'reset' || field[i].type === 'submit' || field[i].type === 'button') continue;

					// If a multi-select, get all selections
					if (field[i].type === 'select-multiple') {
						for (var n = 0; n < field[i].options.length; n++) {
							if (!field[i].options[n].selected) continue;
							serialized.push(encodeURIComponent(field[i].name) + "=" + encodeURIComponent(field[i].options[n].value));
						}
					}

					// Convert field data to a query string
					else if ((field[i].type !== 'checkbox' && field[i].type !== 'radio') || field[i].checked) {
						serialized.push(encodeURIComponent(field[i].name) + "=" + encodeURIComponent(field[i].value));
						//console.log(field[i])
					}
		    	}
		    	//console.log(field[0])
			    	
		    });
		    return serialized.join('&');
		},
		serializeArray: function() {
			var formDataJSON = {};
			this.each(e =>{
				var data = new FormData(e);
				for (var [key, value] of data.entries()) {
				    formDataJSON[key] = value;
				}
			})
			return formDataJSON
		},

		serializeJSON: function() {
			return JSON.stringify(this.serializeArray())
		},

		submit: function(options, callback){

			if (typeof options === 'function'){
				options(this);
			}else if(typeof options === 'object') {
				options = options || {};
			}

			this.on('submit', (t, n) =>{
				n.preventDefault();
				_.http(n.target.method, n.target.action, {
					/*headers:{
						"Content-Type": 'action/plain;charset=UTF-8'
					}*/
					data: options.type != 'json'? this.serialize() : this.serializeJSON(),
				}).then(response => {
					if (options.type.toLowerCase() == 'json' && callback == void 0) {
						if (options.callback) {
							options.callback(response.json(), response)
						}else if(callback != void 0 && options.callback == void 0){
							callback(response.json(), response)
						}else{
							callback = undefined;
						}
					}
					if (options.redirect) {
						location.href = response.getResponseHeader(options.location)
					}
					console.log(options)
				})
			})
		},
	});
})(_)
