(function (t, n, e) {
	let i = [];
	var s = {},
		r = s.toString,
		o = s.hasOwnProperty,
		h = o.toString,
		l = h.call(e),
		c = e.getPrototypeOf,
		a = t => n.querySelectorAll(t),
		u = t => "function" == typeof t && "number" != typeof t.nodeType,
		f = t => {
			var n = !!t && "length" in t && t.length,
				e = (t => null == t ? t + "" : "object" == typeof t || "function" == typeof t ? s[r.call(t)] || "object" : typeof t)(t);
			return !u(t) && !(t => null != t && t === t.window)(t) && ("array" === e || 0 === n || "number" == typeof n && n > 0 && n - 1 in t)
		},
		d = (t, n) => n ? t.split(n) : t.split(" ");
	const p = t => "complete" === n.readyState ? t.call(n) : i.push(t);

	function y(t) {
		if (this.nodes = [], !(this instanceof y)) return new y(t);
		if ("function" == typeof t) return p(t);
		if (t instanceof HTMLElement || t instanceof NodeList ? this.nodes = t.length > 1 ? [].slice(t) : [t] : "string" == typeof t && ("<" === t[0] && ">" === t[t.length - 1] ? this.nodes = [g(t)] : this.nodes = [].slice.call(a(t))), this.nodes.length) {
			this.length = this.nodes.length;
			for (let t = 0; t < this.nodes.length; t++) this[t] = this.nodes[t]
		}
	}

	function g(t) {
		let n = document.createElement("div");
		return n.innerHTML = t, n.firstChild
	}
	n.addEventListener("DOMContentLoaded", function t() {
		for (n.removeEventListener("DOMContentLoaded", t); i.length;) i.shift().call(n)
	}), y.fn = y.prototype, y.extend = y.fn.extend = function () {
		var t, n, e, i, s, r, o = arguments[0] || {},
			h = 1,
			l = arguments.length,
			c = !1;
		for ("boolean" == typeof o && (c = o, o = arguments[h] || {}, h++), "object" == typeof o || u(o) || (o = {}), h === l && (o = this, h--); h < l; h++)
			if (null != (t = arguments[h]))
				for (n in t) i = t[n], "__proto__" !== n && o !== i && (c && i && (y.isPlainObject(i) || (s = Array.isArray(i))) ? (e = o[n], r = s && !Array.isArray(e) ? [] : s || y.isPlainObject(e) ? e : {}, s = !1, o[n] = y.extend(c, r, i)) : void 0 !== i && (o[n] = i));
		return o
	};
	y.extend({
		expando: "JLite 1.0",
		isReady: !0,
		isPlainObject: function (t) {
			var n, e;
			return !(!t || "[object Object]" !== r.call(t)) && (!(n = c(t)) || "function" == typeof (e = o.call(n, "constructor") && n.constructor) && h.call(e) === l)
		},
		isEmptyObject: function (t) {
			var n;
			for (n in t) return !1;
			return !0
		},
		each: function (t, n) {
			var e, i = 0;
			if (f(t))
				for (e = t.length; i < e && !1 !== n.call(t[i], i, t[i]); i++);
			else
				for (i in t)
					if (!1 === n.call(t[i], i, t[i])) break;
			return this
		},
		makeArray: function (t, n) {
			var e = n || [];
			return null != t && (f(Object(t)) ? y.merge(e, "string" == typeof t ? [t] : t) : push.call(e, t)), e
		},
		inArray: function (t, n, e) {
			return null == n ? -1 : indexOf.call(n, t, e)
		},
		merge: function (t, n) {
			for (var e = +n.length, i = 0, s = t.length; i < e; i++) t[s++] = n[i];
			return t.length = s, t
		},
		grep: function (t, n, e) {
			for (var i = [], s = 0, r = t.length, o = !e; s < r; s++) !n(t[s], s) !== o && i.push(t[s]);
			return i
		},
		map: function (t, n, e) {
			var i, s, r = 0,
				o = [];
			if (f(t))
				for (i = t.length; r < i; r++) null != (s = n(t[r], r, e)) && o.push(s);
			else
				for (r in t) null != (s = n(t[r], r, e)) && o.push(s);
			return flat(o)
		},
		guid: 1,
		support: {}
	})

	!function () {
		this.each = function (t) {
			if (t && "function" == typeof t) {
				for (var n = 0; n < this.length; n++) t(this[n], n);
				return this
			}
		}

		this.addClass = function (t) {
			var n = t ? d(t) : "";
			return (this.each(t => {
				t.classList.add(...n)
			}), this)
		}

		this.removeClass = function (t) {
			var n = t ? d(t) : "";
			return (this.each(t => {
				t.classList.remove(...n)
			}), this)
		}

		this.toggleClass = function (t) {
			var n = t ? d(t) : "";
			return (this.each(t => {
				t.classList.toggle(...n)
			}), this)
		}

		this.hasClass = function (t, n) {
			return this[0].classList.contains(t)
		}

		this.hide = function () {
			return (this.each(t => {
				t.style.display = "none"
			}), this)
		}

		this.show = function () {
			return (this.each(t => {
				t.style.display = "block"
			}), this)
		}

		this.toogle = function () {
			return (this.each(t => {
				"block" !== t.style.display && t.style.display ? t.style.display = "block" : t.style.display = "none"
			}), this)
		}

		this.html = function (t) {
			return t ? (this.each(n => {
				n.innerHTML = t
			}), this) : this[0] && this[0].innerHTML
		}

		this.text = function (t) {
			return t ? this.each(n => {
				n.innerText = t
			}) : this.length && this[0].innerText
		}

		this.append = function (t) {
			return this.each(n => {
				n.innerHTML = n.innerHTML + t
			})
		}

		this.attr = function (t, n) {
			if (this[0]) return n ? this.each(e => {
				e.setAttribute(t, n)
			}) : this[0].getAttribute(t)
		}

		this.data = function (t, n) {
			if (this[0]) return n ? this.each(e => {
				e.setAttribute("data-" + t, n)
			}) : this[0].getAttribute("data-" + t)
		}

		this.click = function (t) {
			this.each(n => {
				n.onclick = (n => t(this, n))
			})
		}

		this.on = function (t, n) {
				this.each(e => {
					e.addEventListener(t, t => n(this, t), !1)
				})
			}

		this.off = function (t, n) {
			return this.each(e => {
				e.addEventListener(t, t => n(this, t), !1)
			})
		}
	}.call(y.fn), void 0 !== n ? t._ = y : t.JLite = y

})(window, void 0 !== typeof document ? document : this.document, Object);
